
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge,chrome=1">
    <link rel="shortcut icon" href="/res/display/hex_clock/favicon_hex_clock.ico">
    <title>四线谱指法生成器</title>
    <style>
        html,body,div{
            width: 100%;height: 100%;margin: 0;padding: 0;display: flex;
        }
    </style>
</head>

<body style="flex-direction: column;align-items: center;">
<label style="padding-top: 36px;display: flex;flex-direction: column;align-items: center;">
    <span>请输入内容</span>
    <textarea id="content-textarea" style="width: 600px;height:280px;margin-top: 16px;">/ c c c c / f f f f / g7 g7 g7 g7 / f f f ~ /</textarea>
</label>
<button onclick="generate()" style="width: 160px;height: 32px;margin-top: 16px;">生成</button>
<canvas id="element_canvas" width="1280" height="1920" style="margin-top: 26px;border: red solid 1px;">
    <span>您的浏览器不支持canvas，请更换Google Chrome浏览器进行访问</span>
</canvas>
<script>
    const canvas = document.getElementById('element_canvas')
    const paint = canvas.getContext('2d')

    const FINGERING_WIDTH = 5
    const FINGERING_HEIGHT = 4
    const FINGERING_WIDTH_UNIT = 12
    const FINGERING_HEIGHT_UNIT = 20
    const FINGERING_HEAD_STROKE_WEIGHT = 1
    const FINGERING_STROKE_WEIGHT = 1
    const FINGERING_DOT_RADIUS = 3
    const FINGERING_TEXT_SIZE = 28
    const FINGERING_TEXT_DISTANCE = 8

    const LINE_WIDTH = canvas.width *0.8
    const LINE_HEIGHT = 75
    const LINE_HORIZONTAL_ITEM_COUNT = 3
    const LINE_VERTICAL_LINE_COUNT = 4

    const LINE_DISTANCE = 56

    let step = 4
    let str = ''

    // 规范
    // / 代表分隔一拍
    // 空格 分隔每一拍内的动作，动作有以下3种
    //      1. ~ 代表空
    //      2. 数字代表要弹的弦，如1代表 1弦， 23代表2和3弦
    //      3. + 代表扫弦↑, -  代表扫弦↓
    //      PS : 关于动作，如果小括号括着并且用逗号分隔则代表逗号左右为1/8拍，
    //      PPS: 如有冒号，后面则代表的是歌词（歌词不能包含上面的特殊字符）

    function draw_line(x1, y1, x2, y2, weight){
        paint.fillStyle = 'rgba(0,0,0,0)'
        paint.strokeStyle = 'black'
        paint.lineWidth = weight
        paint.moveTo(x1, y1)
        paint.lineTo(x2, y2)
        paint.stroke()
    }

    function draw_dot(x, y, radius) {
        paint.fillStyle = 'black'
        paint.strokeStyle = 'rgba(0,0,0,0)'
        paint.beginPath()
        paint.moveTo(x, y)
        paint.arc(x, y, radius, 0, Math.PI * 2, true)
        paint.closePath()
        paint.fill()
    }

    function draw_fingering(x, y, horizontal_size, vertical_size, dots, hint) {
        // 绘制文字
        paint.fillStyle = 'black'
        if (hint !== undefined){
            paint.font = FINGERING_TEXT_SIZE.toString() + 'px Arial'
            paint.fillText(hint.toString().toUpperCase(), x, y - FINGERING_TEXT_DISTANCE)
        }
        // 绘制竖线
        for (let i=0; i<=horizontal_size; i++){
            let line_weight = FINGERING_STROKE_WEIGHT
            if(i <= 0){
                line_weight = FINGERING_HEAD_STROKE_WEIGHT
            }
            draw_line(
                x + i * FINGERING_WIDTH_UNIT,
                y,
                x + i * FINGERING_WIDTH_UNIT,
                y + (vertical_size - 1) * FINGERING_HEIGHT_UNIT,
                line_weight
            )
        }
        // 绘制横线
        for (let i=0; i<vertical_size; i++){
            draw_line(
                x,
                y + i * FINGERING_HEIGHT_UNIT,
                x + horizontal_size * FINGERING_WIDTH_UNIT,
                y + i * FINGERING_HEIGHT_UNIT,
                FINGERING_STROKE_WEIGHT
            )
        }
        // 绘制点
        for(let index in dots){
            const tmp_dot = dots[index]
            draw_dot(
                x + ( tmp_dot[0] + 0.5 ) * FINGERING_WIDTH_UNIT,
                y + tmp_dot[1] * FINGERING_HEIGHT_UNIT,
                FINGERING_DOT_RADIUS
            )
        }
    }

    function draw_fingering_c(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], ], 'c')
    }
    function draw_fingering_cm(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], [2, 1], [2, 2], ], 'cm')
    }
    function draw_fingering_c7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [0, 0], ], 'c7')
    }
    function draw_fingering_cm7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], [2, 1], [2, 2], [2, 3], ], 'cm7')
    }

    function draw_fingering_g(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [2, 1], [1, 2], ], 'g')
    }
    function draw_fingering_gm(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [0, 0], [2, 1], [1, 2], ], 'gm')
    }
    function draw_fingering_g7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [0, 1], [1, 2], ], 'g7')
    }
    function draw_fingering_gm7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [0, 0], [0, 1], [1, 2], ], 'gm7')
    }

    function draw_fingering_d(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 1], [1, 2], [1, 3], ], 'd')
    }
    function draw_fingering_dm(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [0, 1], [1, 2], [1, 3], ], 'dm')
    }
    function draw_fingering_d7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], [1, 1], [1, 2], [1, 3], ], 'd7')
    }
    function draw_fingering_dm7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], [0, 1], [1, 2], [1, 3], ], 'dm7')
    }

    function draw_fingering_a(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [0, 2], [1, 3],  ], 'a')
    }
    function draw_fingering_am(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 3], ], 'am')
    }
    function draw_fingering_a7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [0, 2], ], 'a7')
    }
    function draw_fingering_am7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [  ], 'am7')
    }

    function draw_fingering_e(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [3, 1], [3, 2], [3, 3], ], 'e')
    }
    function draw_fingering_em(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [2, 1], [3, 2], ], 'em')
    }
    function draw_fingering_e7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [1, 2], [0, 3], ], 'e7')
    }
    function draw_fingering_em7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [1, 2],  ], 'em7')
    }

    function draw_fingering_b(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [1, 1], [2, 2], [3, 3], ], 'b')
    }
    function draw_fingering_bm(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [1, 1], [1, 2], [3, 3], ], 'bm')
    }
    function draw_fingering_b7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 1], [2, 2], [3, 3], ], 'b7')
    }
    function draw_fingering_bm7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [1, 0], [1, 1], [1, 2], [1, 3], ], 'bm7')
    }

    function draw_fingering_f(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [0, 1], [1, 3], ], 'f')
    }
    function draw_fingering_fm(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], [0, 1], [0, 3], ], 'fm')
    }
    function draw_fingering_f7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], [0, 1], [2, 2], [1, 3], ], 'f7')
    }
    function draw_fingering_fm7(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [ [2, 0], [0, 1], [2, 2], [0, 3], ], 'fm7')
    }

    function draw_fingering_empty(x, y){
        draw_fingering( x, y, FINGERING_WIDTH, FINGERING_HEIGHT, [  ], '~')
    }

    function generate(){
        // 清屏
        paint.fillStyle = 'white'
        paint.fillRect(0, 0, canvas.width, canvas.height)
        // 初始化临时变量
        // 绘制
        let content = document.getElementById('content-textarea').value.toString()
        let x = 32
        let y = 32
        // 分割每一拍
        let content_array = []
        let content_split_array = content.split('/')
        for(let i=0; i<content_split_array.length; i++){
            let tmp_content_item = content_split_array[i].trim()
            if(tmp_content_item.length > 0){
                content_array.push(tmp_content_item)
            }
        }
        // 绘制每一拍
        for (let i=0; i<content_array.length; i++){
            let content_item = content_array[i]
            let tmp_chord_array = content_item.split(" ")
            // 去除无用的信息
            let chord_array = []
            for(let j=0; j<tmp_chord_array.length; j++){
                let tmp = tmp_chord_array[j].trim()
                if(tmp.length > 0){
                    chord_array.push(tmp)
                }
            }
            // 补全不足 4 的部分
            if (chord_array.length < 4){
                for (let j=chord_array.length; j<4; j++){
                    chord_array.push('~')
                }
            }

            log(chord_array)
            // 绘制
            for(let j=0; j<chord_array.length; j++){
                let chord = chord_array[j].trim()
                // 绘制指法
                switch(chord.toUpperCase()){
                    case 'A' : draw_fingering_a(x, y);break
                    case 'B' : draw_fingering_b(x, y);break
                    case 'C' : draw_fingering_c(x, y);break
                    case 'D' : draw_fingering_d(x, y);break
                    case 'E' : draw_fingering_e(x, y);break
                    case 'F' : draw_fingering_f(x, y);break
                    case 'G' : draw_fingering_g(x, y);break

                    case 'AM' : draw_fingering_am(x, y);break
                    case 'BM' : draw_fingering_bm(x, y);break
                    case 'CM' : draw_fingering_cm(x, y);break
                    case 'DM' : draw_fingering_dm(x, y);break
                    case 'EM' : draw_fingering_em(x, y);break
                    case 'FM' : draw_fingering_fm(x, y);break
                    case 'GM' : draw_fingering_gm(x, y);break

                    case 'A7' : draw_fingering_a7(x, y);break
                    case 'B7' : draw_fingering_b7(x, y);break
                    case 'C7' : draw_fingering_c7(x, y);break
                    case 'D7' : draw_fingering_d7(x, y);break
                    case 'E7' : draw_fingering_e7(x, y);break
                    case 'F7' : draw_fingering_f7(x, y);break
                    case 'G7' : draw_fingering_g7(x, y);break

                    case 'AM7' : draw_fingering_am7(x, y);break
                    case 'BM7' : draw_fingering_bm7(x, y);break
                    case 'CM7' : draw_fingering_cm7(x, y);break
                    case 'DM7' : draw_fingering_dm7(x, y);break
                    case 'EM7' : draw_fingering_em7(x, y);break
                    case 'FM7' : draw_fingering_fm7(x, y);break
                    case 'GM7' : draw_fingering_gm7(x, y);break

                    case '~' : draw_fingering_empty(x, y);break
                }
                // 绘制指弹谱
                {
                    for(let a=0; a<LINE_VERTICAL_LINE_COUNT; a++){
                        let tmp_y = y + ( (FINGERING_HEIGHT - 1) * FINGERING_HEIGHT_UNIT + FINGERING_TEXT_SIZE + FINGERING_TEXT_DISTANCE)
                        tmp_y = tmp_y + a * (LINE_HEIGHT / (LINE_VERTICAL_LINE_COUNT - 1))
                        draw_line(x, tmp_y, x + LINE_WIDTH / LINE_HORIZONTAL_ITEM_COUNT, tmp_y)
                    }
                    let tmp_y = y + ( (FINGERING_HEIGHT - 1) * FINGERING_HEIGHT_UNIT + FINGERING_TEXT_SIZE + FINGERING_TEXT_DISTANCE)
                    draw_line(x, tmp_y, x, tmp_y + LINE_HEIGHT)
                    let tmp_x = x + LINE_WIDTH / LINE_HORIZONTAL_ITEM_COUNT
                    draw_line(tmp_x, tmp_y, tmp_x, tmp_y + LINE_HEIGHT)
                }
                // 下一个的位置计算
                x += LINE_WIDTH / LINE_HORIZONTAL_ITEM_COUNT
                if (x > 1280){
                    x %= 100
                    // y 加上指法示意图的高度
                    y += ( (FINGERING_HEIGHT - 1) * FINGERING_HEIGHT_UNIT + FINGERING_TEXT_SIZE + FINGERING_TEXT_DISTANCE)
                    // y 加上指弹示意图的高度
                    y += LINE_HEIGHT
                    // y 加上行距
                    y += LINE_DISTANCE
                }
            }
        }

        log(content_array)

    }

    generate()

    function log(msg){
        console.log(msg)
    }


</script>
</body>

</html>

